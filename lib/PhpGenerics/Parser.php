<?php

namespace PhpGenerics;
use PhpParser\ParserAbstract;
use PhpParser\Node;
use PhpParser\Error;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/zend_language_parser.phpy
 *  * the skeleton file grammar/kymacc.php.parser
 *  * the preprocessing script grammar/rebuildParser.php
 */
class Parser extends ParserAbstract
{
    protected $tokenToSymbolMapSize = 391;
    protected $actionTableSize = 1128;
    protected $gotoTableSize = 577;

    protected $invalidToken = 156;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 410;
    protected $YYNLSTATES   = 651;

    const YYERRTOK = 256;
    const T_INCLUDE = 257;
    const T_INCLUDE_ONCE = 258;
    const T_EVAL = 259;
    const T_REQUIRE = 260;
    const T_REQUIRE_ONCE = 261;
    const T_LOGICAL_OR = 262;
    const T_LOGICAL_XOR = 263;
    const T_LOGICAL_AND = 264;
    const T_PRINT = 265;
    const T_YIELD = 266;
    const T_PLUS_EQUAL = 267;
    const T_MINUS_EQUAL = 268;
    const T_MUL_EQUAL = 269;
    const T_DIV_EQUAL = 270;
    const T_CONCAT_EQUAL = 271;
    const T_MOD_EQUAL = 272;
    const T_AND_EQUAL = 273;
    const T_OR_EQUAL = 274;
    const T_XOR_EQUAL = 275;
    const T_SL_EQUAL = 276;
    const T_SR_EQUAL = 277;
    const T_POW_EQUAL = 278;
    const T_COALESCE = 279;
    const T_BOOLEAN_OR = 280;
    const T_BOOLEAN_AND = 281;
    const T_IS_EQUAL = 282;
    const T_IS_NOT_EQUAL = 283;
    const T_IS_IDENTICAL = 284;
    const T_IS_NOT_IDENTICAL = 285;
    const T_SPACESHIP = 286;
    const T_IS_SMALLER_OR_EQUAL = 287;
    const T_IS_GREATER_OR_EQUAL = 288;
    const T_SL = 289;
    const T_SR = 290;
    const T_INSTANCEOF = 291;
    const T_INC = 292;
    const T_DEC = 293;
    const T_INT_CAST = 294;
    const T_DOUBLE_CAST = 295;
    const T_STRING_CAST = 296;
    const T_ARRAY_CAST = 297;
    const T_OBJECT_CAST = 298;
    const T_BOOL_CAST = 299;
    const T_UNSET_CAST = 300;
    const T_POW = 301;
    const T_NEW = 302;
    const T_CLONE = 303;
    const T_EXIT = 304;
    const T_IF = 305;
    const T_ELSEIF = 306;
    const T_ELSE = 307;
    const T_ENDIF = 308;
    const T_LNUMBER = 309;
    const T_DNUMBER = 310;
    const T_STRING = 311;
    const T_STRING_VARNAME = 312;
    const T_VARIABLE = 313;
    const T_NUM_STRING = 314;
    const T_INLINE_HTML = 315;
    const T_CHARACTER = 316;
    const T_BAD_CHARACTER = 317;
    const T_ENCAPSED_AND_WHITESPACE = 318;
    const T_CONSTANT_ENCAPSED_STRING = 319;
    const T_ECHO = 320;
    const T_DO = 321;
    const T_WHILE = 322;
    const T_ENDWHILE = 323;
    const T_FOR = 324;
    const T_ENDFOR = 325;
    const T_FOREACH = 326;
    const T_ENDFOREACH = 327;
    const T_DECLARE = 328;
    const T_ENDDECLARE = 329;
    const T_AS = 330;
    const T_SWITCH = 331;
    const T_ENDSWITCH = 332;
    const T_CASE = 333;
    const T_DEFAULT = 334;
    const T_BREAK = 335;
    const T_CONTINUE = 336;
    const T_GOTO = 337;
    const T_FUNCTION = 338;
    const T_CONST = 339;
    const T_RETURN = 340;
    const T_TRY = 341;
    const T_CATCH = 342;
    const T_FINALLY = 343;
    const T_THROW = 344;
    const T_USE = 345;
    const T_INSTEADOF = 346;
    const T_GLOBAL = 347;
    const T_STATIC = 348;
    const T_ABSTRACT = 349;
    const T_FINAL = 350;
    const T_PRIVATE = 351;
    const T_PROTECTED = 352;
    const T_PUBLIC = 353;
    const T_VAR = 354;
    const T_UNSET = 355;
    const T_ISSET = 356;
    const T_EMPTY = 357;
    const T_HALT_COMPILER = 358;
    const T_CLASS = 359;
    const T_TRAIT = 360;
    const T_INTERFACE = 361;
    const T_EXTENDS = 362;
    const T_IMPLEMENTS = 363;
    const T_OBJECT_OPERATOR = 364;
    const T_DOUBLE_ARROW = 365;
    const T_LIST = 366;
    const T_ARRAY = 367;
    const T_CALLABLE = 368;
    const T_CLASS_C = 369;
    const T_TRAIT_C = 370;
    const T_METHOD_C = 371;
    const T_FUNC_C = 372;
    const T_LINE = 373;
    const T_FILE = 374;
    const T_COMMENT = 375;
    const T_DOC_COMMENT = 376;
    const T_OPEN_TAG = 377;
    const T_OPEN_TAG_WITH_ECHO = 378;
    const T_CLOSE_TAG = 379;
    const T_WHITESPACE = 380;
    const T_START_HEREDOC = 381;
    const T_END_HEREDOC = 382;
    const T_DOLLAR_OPEN_CURLY_BRACES = 383;
    const T_CURLY_OPEN = 384;
    const T_PAAMAYIM_NEKUDOTAYIM = 385;
    const T_NAMESPACE = 386;
    const T_NS_C = 387;
    const T_DIR = 388;
    const T_NS_SEPARATOR = 389;
    const T_ELLIPSIS = 390;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_DOUBLE_ARROW",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
    );

    protected $tokenToSymbol = array(
            0,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,   51,  155,  156,  152,   50,   33,  156,
          150,  151,   48,   45,    7,   46,   47,   49,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,   27,  147,
           39,   13,   41,   26,   63,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,   65,  156,  154,   32,  156,  153,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  148,   31,  149,   53,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
          156,  156,  156,  156,  156,  156,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   14,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   28,
           29,   30,   34,   35,   36,   37,   38,   40,   42,   43,
           44,   52,   54,   55,   56,   57,   58,   59,   60,   61,
           62,   64,   66,   67,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,  156,  156,   80,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  136,  156,  156,  156,  156,  156,
          156,  137,  138,  139,  140,  141,  142,  143,  144,  145,
          146
    );

    protected $action = array(
           60,   61,  420,   62,   63,-32766,-32766,-32766,-32766,   64,
           65,  221,  222,  223,  224,  225,  226,  227,  228,  229,
          655,  230,  231,  232,  233,  234,  235,  236,  237,  238,
          239,  240,  241,-32766,-32766,-32766,-32766,-32766,-32767,-32767,
        -32767,-32767,   31,   66,   67,  614,  242,  243,    0,   68,
          365,   69,  294,  295,   70,   71,   72,   73,   74,   75,
           76,   77,   35,   32,  304,   78,  412,  421,  134,  128,
          417,  974,  975,  469,  366, 1067,  334,  701,  345,  470,
           46,   27,  422,  760,  471,  827,  472,  497,  473,  443,
          425,  423,  218,  219,  220,   36,   37,  474,  428,  285,
           38,  475,  424,  413,   79,  419,  301,  357,  358,  323,
          205,  209,  465,  476,  477,  478,  479,  480,  726,  814,
         1033,  378,  661,  732,  481,  482,  483,  484,  926,  980,
          981,  982,  983,  977,  978,  312,   83,   84,   85,  542,
          497,  984,  979,  425,  336,  707,  624,  131,   47,  298,
          337,  324, 1096,  328,   40,  283,   86,   87,   88,   89,
           90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
          100,  101,  102,  103,  104,  105,  106,  107,  108, -123,
          305,  298,  310,   39,  297,-32766,  791,-32766,-32766,-32766,
          698,  655,  109, 1032, 1099,-32766, 1101, 1100,-32766,-32766,
        -32766,  483,-32766,  761,-32766,-32766,-32766,-32766,-32766,-32766,
          218,  219,  220,-32766,-32766,-32766,  448,-32766,-32766,-32766,
          784,  785,-32766,  655,-32766,-32766,  496,-32766,  205,  699,
        -32766,-32766,-32766,-32766,-32766, 1025,-32766,   58,-32766, 1033,
          926,-32766, -127, 1074,  439,-32766,-32766,-32766,  578,  941,
        -32766,-32766,  809,  339,-32766,  354,  355,-32766,  496,-32766,
        -32766,-32766,  132,-32766,-32766,-32766,  835,  836,  837,  834,
          833,  832,  926,  218,  219,  220,  800,-32766,  356,-32766,
        -32766,-32766,-32766,-32766,-32766,-32767,-32767,-32767,-32767,-32767,
          442,  205, 1061,  286,  132,-32766,-32766,-32766,  326,  790,
          415,   54,  300,  655,  388,   55,  986,-32766,-32766,-32766,
        -32766,-32766,-32766,  417,-32766,  926,-32766,  220,-32766,  334,
          127,-32766,  218,  219,  220,-32766,-32766,-32766,  827,-32766,
        -32766,-32766,   57,  205,-32766,  655,  296,-32766,  496,-32766,
          205,  246,-32766,-32766,-32766,-32766,-32766,  926,-32766,  417,
        -32766,  287, 1067,-32766,  623,  334, 1024,-32766,-32766,-32766,
           22,  725,-32766,-32766,  827,  440,-32766,  346,  299,-32766,
          496,  122,-32766,  219,  220,-32766,-32766,-32766,  655,  106,
          107,  108,-32766,  305,  123,-32766,-32766,-32766,  124,-32766,
          205,-32766,  244,-32766, -301,  109,-32766,  724,-32766,-32766,
        -32766,-32766,-32766,  -76,-32766,-32766,-32766,-32766,-32766,-32766,
          655,  205,-32766,  496,-32766,  125,  447,-32766,-32766,-32766,
        -32766,-32766, 1089,-32766,  926,-32766,  819,  337,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766, 1071,  136,-32766,-32766,  130,
          570,-32766,  210,  329,-32766,  496,  239,  240,  241,  211,
        -32766,-32766,-32766,-32766,-32766,-32766,  926,-32766,-32766,-32766,
        -32766,-32766,  242,  243,  212,   41,  110,  111,  112,  113,
          114,  115,  116,  117,  118,  119,  120,  121,  103,  104,
          105,-32766,-32766,-32766,  236,  237,  238,  655,  247,  131,
         1089,-32766,  453,   28,-32766,-32766,-32766, 1030,-32766,  926,
        -32766,  986,-32766,  248,  569,-32766,  865,  867,  133,-32766,
        -32766,-32766,  311,-32766,-32766,-32766,  639,  728,-32766,  655,
          643,-32766,  496,-32766,  242,  243,-32766,-32766,-32766,-32766,
        -32766,  926,-32766,  435,-32766,  711,  626,-32766,  729,  458,
          584,-32766,-32766,-32766,  137,  367,-32766,-32766, 1031,  135,
        -32766,  730,  627,-32766,  496,  629,-32766,  592,  593,-32766,
        -32766,-32766,  655,-32766,-32766,-32766,-32766,  784,  785,-32766,
        -32766,-32766,  635,-32766,  926,-32766,  640,-32766, -402,  646,
        -32766,-32766,  662,  630,-32766,-32766,-32766,-32766,-32766,-32766,
        -32766,-32766,-32766,-32766,  655,  364,-32766,  496,-32766,  720,
          305,-32766,-32766,-32766,-32766,-32766,  109,-32766,   49,-32766,
          824,  650,-32766,  813,  645,   50,-32766,-32766,-32766,   51,
          343,-32766,-32766,  304,   52,-32766,   53,  344,-32766,  496,
           56,-32766,   59, 1089,  691,-32766,-32766,  655,  218,  219,
          220,-32766,  598,  433,-32766,-32766,-32766,  434,-32766,  437,
        -32766,  245,-32766,  441,  466,-32766,  205,  517,  518,-32766,
        -32766,-32766,  533,  621,-32766,-32766,  693,-32766,-32766,  213,
          214,-32766,  496,  655,  656,  215,  672,  216, 1094,-32766,
        -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,  207,
        -32767,-32767,-32767,-32767,  674,  731,  821,  974,  975, -175,
          521,-32766,-32766,  604,  605,  976,  612, -172,  655,  695,
        -32766,  944,-32766,  432,  464,-32766,-32766,-32766,  589,-32766,
          438,-32766,  576,-32766,  303,  587,-32766,  535,  733,  564,
        -32766,-32766,-32766,  282,  332,-32766,-32766,  734, -402,-32766,
          985,  338,-32766,  496,  325, -309,  335, -301,   82,  315,
        -32766,  327,   44,  561,  435,  980,  981,  982,  983,  977,
          978,  395,    0,  213,  214,  333,   42,  984,  979,  215,
         -403,  216,  126,    0,  217,  483,-32766,    0,    0,    0,
        -32766,-32766,    0,  207,  967,    0,    0,  331,-32766,  368,
          381,  974,  975,  620,  655,-32766, -310,   45,-32766,  976,
          722,-32766,-32766,-32766,  526,-32766,  415,-32766,  625,-32766,
          631,  632,-32766,  697,  710,  688,-32766,-32766,-32766,  703,
          763,-32766,-32766,  424,  413,-32766,  754,  755,-32766,  496,
          323,  686,  748,  746,  476,  477,-32766,  744,-32766,-32766,
        -32766,  820,  818,  661,  732,  481,  482,  561,  702,  980,
          981,  982,  983,  977,  978,  395,-32766,  692,-32766,-32766,
        -32766,  984,  979,  694,  696,  336,-32766,-32766,  217,  709,
        -32766,  700,  664,  424,  413,  817,  665,  666,  667,  668,
          323,-32766,-32766,-32766,  476,  477,  810, 1098,  634,-32766,
        -32766,-32766,  636,  661,  732,  481,  482,  638,  642,-32766,
          644,-32766,-32766,-32766,-32766,-32766,-32766,-32766,  647,-32766,
        -32766,-32766,-32766,-32766,  648,  336,  649,  129, -124, 1097,
          752,  424,  663,-32767,-32767,-32767,-32767,  101,  102,  103,
          104,  105,  476,  477,  424,  753,  457, 1095,  424, 1068,
         1066,  683,  732,  481,  482,  476,  477, 1052, 1064,  476,
          477,  424,  965,  802,  683,  732,  481,  482,  683,  732,
          481,  482,  476,  477, 1072, 1062,  924,   30,  424,   33,
          633,  683,  732,  481,  482,   34,   43,   48,   80,  476,
          477,   81,  424,  684, -123,  208,  424,  716,  683,  732,
          481,  482,  284,  476,  477,  292,  293,  476,  477,  424,
          927,  573,  683,  732,  481,  482,  683,  732,  481,  482,
          476,  477,  306,  307,  308,  309,  424,  723,   23,  683,
          732,  481,  482,   24,  340,  411,  414,  476,  477,  619,
        -32766,  928,  934,  -76,    0,  714,  683,  732,  481,  482,
          602,   25,  424,  389,  611,  454,  460,  462,  825,  424,
          655,  467, 1067,  476,  477,  424,  555,  613,  930,  933,
          476,  477,  683,  732,  481,  482,  476,  477,  792,  683,
          732,  481,  482,  990,  929,  683,  732,  481,  482,-32766,
        -32766,-32766,  906,  424,  565,  951,  905,    0,  936,    0,
          935,  938,  937,  950,  476,  477,    0,-32766, 1065,-32766,
        -32766,-32766,-32766,  683,  732,  481,  482, 1051, 1047,    0,
         1063,  964, 1093,  991, 1046,  595,    0,  497,    0,    0,
          425,    0,    0,    0,    0,  429,    0,  337
    );

    protected $actionCheck = array(
            2,    3,    4,    5,    6,   29,   30,   31,   32,   11,
           12,   29,   30,   31,   32,   33,   34,   35,   36,   37,
           75,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   29,   30,   31,   32,   33,   34,   35,
           36,   37,    7,   45,   46,   75,   64,   65,    0,   51,
            7,   53,   54,   55,   56,   57,   58,   59,   60,   61,
           62,   63,    7,   65,   66,   67,   68,   69,   65,    7,
          101,   73,   74,   75,   75,   77,  107,   79,   65,   81,
           82,   83,   84,   27,   86,  116,   88,  142,   90,    7,
          145,   93,    8,    9,   10,   97,   98,   99,  100,    7,
          102,  103,  100,  101,  106,    7,   33,  109,  110,  107,
           26,    7,    7,  111,  112,  117,  118,  119,  149,  149,
          121,   77,  120,  121,  122,  123,  128,  129,   12,  131,
          132,  133,  134,  135,  136,  137,    8,    9,   10,  126,
          142,  143,  144,  145,  142,  147,  148,  148,  150,   33,
          152,  153,  149,  155,   26,  127,   28,   29,   30,   31,
           32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
           42,   43,   44,   45,   46,   47,   48,   49,   50,  151,
           52,   33,    7,  139,  140,   69,  151,    8,    9,   10,
          147,   75,   64,   75,   75,   79,   77,   78,   82,   83,
           84,  128,   86,  147,   88,   26,   90,   28,   29,   93,
            8,    9,   10,   97,   98,   99,    7,   69,  102,  103,
          129,  130,  106,   75,    8,  109,  110,   79,   26,  147,
           82,   83,   84,  117,   86,  151,   88,   65,   90,  121,
           12,   93,  151,  151,   27,   97,   98,   99,   80,  151,
          102,  103,  147,    7,  106,  100,  101,  109,  110,    8,
            9,   10,  146,  147,  148,  117,  110,  111,  112,  113,
          114,  115,   12,    8,    9,   10,   77,   26,    7,   28,
           29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
            7,   26,   77,   33,  146,  147,  148,   69,  126,  151,
          145,   65,    7,   75,   76,   65,  138,   79,    8,    9,
           82,   83,   84,  101,   86,   12,   88,   10,   90,  107,
          148,   93,    8,    9,   10,   97,   98,   99,  116,   69,
          102,  103,   65,   26,  106,   75,   33,  109,  110,   79,
           26,   27,   82,   83,   84,  117,   86,   12,   88,  101,
           90,  152,   77,   93,   75,  107,  154,   97,   98,   99,
          151,  149,  102,  103,  116,  148,  106,  152,   33,  109,
          110,   13,   69,    9,   10,  147,  148,  117,   75,   48,
           49,   50,   79,   52,  148,   82,   83,   84,  148,   86,
           26,   88,  127,   90,  141,   64,   93,  149,   29,   30,
           97,   98,   99,  150,   69,  102,  103,  147,  148,  106,
           75,   26,  109,  110,   79,  148,   75,   82,   83,   84,
          117,   86,   80,   88,   12,   90,  147,  152,   93,    8,
            9,   10,   97,   98,   99,   75,  148,  102,  103,   27,
          152,  106,   13,   80,  109,  110,   48,   49,   50,   13,
          147,  148,  117,   29,   30,   31,   12,   29,   30,   31,
           32,   33,   64,   65,   13,   13,   14,   15,   16,   17,
           18,   19,   20,   21,   22,   23,   24,   25,   45,   46,
           47,   69,  147,  148,   45,   46,   47,   75,   13,  148,
           80,   79,   70,   71,   82,   83,   84,  155,   86,   12,
           88,  138,   90,   13,    7,   93,   54,   55,  148,   97,
           98,   99,   27,   69,  102,  103,   27,   41,  106,   75,
           27,  109,  110,   79,   64,   65,   82,   83,   84,  117,
           86,   12,   88,  145,   90,   27,  148,   93,   41,   70,
           71,   97,   98,   99,   95,   96,  102,  103,  138,   27,
          106,   75,   27,  109,  110,   27,   69,  104,  105,  147,
          148,  117,   75,    8,    9,   10,   79,  129,  130,   82,
           83,   84,   27,   86,   12,   88,   27,   90,  126,   27,
           93,   26,  147,  148,   97,   98,   99,   29,   69,  102,
          103,  147,  148,  106,   75,   39,  109,  110,   79,   33,
           52,   82,   83,   84,  117,   86,   64,   88,   65,   90,
          147,  148,   93,  147,  148,   65,   97,   98,   99,   65,
           80,  102,  103,   66,   65,  106,   65,   80,  109,  110,
           65,   69,   65,   80,  147,  148,  117,   75,    8,    9,
           10,   79,   72,   75,   82,   83,   84,   75,   86,   75,
           88,   27,   90,   75,   75,   93,   26,   75,   75,   97,
           98,   99,   75,   75,  102,  103,  147,  148,  106,   45,
           46,  109,  110,   75,   75,   51,   75,   53,   75,  117,
           29,   30,   31,   32,   33,   34,   35,   36,   37,   65,
           39,   40,   41,   42,   75,   75,   75,   73,   74,   77,
           77,   77,   69,   77,   77,   81,   77,   92,   75,  147,
          148,   77,   79,  100,  100,   82,   83,   84,  107,   86,
           84,   88,   94,   90,   92,   94,   93,   92,  121,   92,
           97,   98,   99,   92,  124,  102,  103,  121,  126,  106,
          138,  124,  109,  110,  126,  141,  108,  141,  148,  141,
          117,  126,  147,  129,  145,  131,  132,  133,  134,  135,
          136,  137,   -1,   45,   46,  125,  127,  143,  144,   51,
          126,   53,  127,   -1,  150,  128,  152,   -1,   -1,   -1,
          147,  148,   -1,   65,  151,   -1,   -1,  141,   69,  141,
          141,   73,   74,  141,   75,   77,  141,  147,   79,   81,
          146,   82,   83,   84,  145,   86,  145,   88,  148,   90,
          147,  147,   93,  147,  147,  147,   97,   98,   99,  147,
          147,  102,  103,  100,  101,  106,  147,  147,  109,  110,
          107,  147,  147,  147,  111,  112,  117,  147,    8,    9,
           10,  147,  147,  120,  121,  122,  123,  129,  147,  131,
          132,  133,  134,  135,  136,  137,   26,  147,   28,   29,
           30,  143,  144,  147,  147,  142,  147,  148,  150,  147,
          152,  147,  149,  100,  101,  147,  147,  147,  147,  147,
          107,    8,    9,   10,  111,  112,  147,  149,  148,    8,
            9,   10,  148,  120,  121,  122,  123,  148,  148,   26,
          148,   28,   29,   30,   31,   32,   33,   26,  148,   28,
           29,   30,   31,   32,  148,  142,  148,  148,  151,  149,
          149,  100,  149,   39,   40,   41,   42,   43,   44,   45,
           46,   47,  111,  112,  100,  149,  149,  149,  100,  149,
          149,  120,  121,  122,  123,  111,  112,  149,  149,  111,
          112,  100,  149,  149,  120,  121,  122,  123,  120,  121,
          122,  123,  111,  112,  149,  149,  153,  150,  100,  150,
          149,  120,  121,  122,  123,  150,  150,  150,  150,  111,
          112,  150,  100,  149,  151,  150,  100,  149,  120,  121,
          122,  123,  150,  111,  112,  150,  150,  111,  112,  100,
          149,   85,  120,  121,  122,  123,  120,  121,  122,  123,
          111,  112,  150,  150,  150,  150,  100,  149,  151,  120,
          121,  122,  123,  151,  150,  150,  150,  111,  112,   87,
          150,  149,  154,  150,   -1,  149,  120,  121,  122,  123,
           91,  151,  100,  151,   89,  151,  151,  151,  149,  100,
           75,  151,   77,  111,  112,  100,  151,  151,  151,  151,
          111,  112,  120,  121,  122,  123,  111,  112,  151,  120,
          121,  122,  123,  151,  151,  120,  121,  122,  123,    8,
            9,   10,  151,  100,  151,  110,  151,   -1,  154,   -1,
          154,  154,  154,  154,  111,  112,   -1,   26,  154,   28,
           29,   30,   31,  120,  121,  122,  123,  154,  154,   -1,
          154,  154,  154,  154,  154,  154,   -1,  142,   -1,   -1,
          145,   -1,   -1,   -1,   -1,  150,   -1,  152
    );

    protected $actionBase = array(
            0,  723,  773,    2,  834,  821,  916,  949,  955,  838,
          851,  942,  868,  882,  886,  899,  983,  983,  983,  983,
          983,  528,  545,  549,  552,  549,  525,   -2,   -2,   -2,
          148,  116,  303,  303,  633,  303,  487,  519,  562,  228,
          412,  260,  335,  444,  444,  444,  444,  719,  719,  444,
          444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
          444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
          444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
          444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
          444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
          444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
          444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
          444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
          444,  444,  444,  444,  444,  444,  444,  444,   56,  701,
          645,  639,  710,  716,  717,  722,  923,  641,  931,  788,
          790,  522,  791,  798,  799,  803,  804,  787,  815,  961,
          816,  128,  128,  128,  128,  128,  128,  128,  128,  128,
          128,  128,  216,  265,   84,  314,  202,  300,  630,  630,
          630,  630,  630,  630,  421,  421,  421,  421,  421,  421,
          421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
          364,  555,  555,  555,  307,  624,  385,  718,  718,  718,
          718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
          718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
          718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
          718,  718,  718,  718,  718,  718,  718,  718,  718,  179,
          -18,  -18,  830,  558, 1071,  369,  881,  424,  873,  251,
          251,  251,  251,  251,  -24,  428,    4,    4,    4,    4,
          452,  884,  884,  884,  884,  651,  651,  651,  651,  -31,
          212,  248,   73,   73,  647,  647,  557,  769,  433,  433,
          439,  439,  975,  975,  975,  975,  975,  975,  975,  975,
          975,  975,  622,  588,  880,  880,   91,   91,   91,   91,
          438,  438,  363,  410,  342,   -1,  331,  331,  331,  398,
          398,  398,  -30,  155,  540,  360,  360,  360,  547,  602,
          553,  341,  -55,  -55,  -55,  -55,  388,  600,  -55,  -55,
          -55,  253,  240,   44,   44,  119,  288,  628,  771,  631,
          786,  466,  655,  172,  661,  661,  661,  199,  613,  422,
          469,  453,  883,  217,  476,  199,  883,   56,  118,  463,
          267,  548,  724,  578,  732,  729,   43,   82,   13,  435,
          236,  215,  209,  730,  731,  933,  935,   92,    3,  644,
          548,  548,  548,  497,   35,  168,  236,   28,  460,  460,
          460,  460,  460,  460,  460,  460,  739,  105,   98,  728,
          279,  566,  825,  583,  587,  598,  817,  583,  627,  566,
          827,  827,  827,  827,  566,  598,  817,  817,  566,  557,
           55,  556,  566,  556,  556,  598,  817,  556,  827,  663,
          664,  556,  583,  623,  610,  617,  817,  556,  587,  556,
          566,  640,  817,  827,  611,  654,  104,  556,  827,  485,
          611,  817,  485,  485,  566,  627,  556,  485,   48,  508,
          543,  826,  828,  876,  582,  660,  607,  616,  845,  846,
          831,  568,  572,  842,  819,  659,  666,  574,  358,  550,
          554,  559,  561,  608,  565,  618,  613,  609,  542,  542,
          542,  612,  646,  612,  542,  542,  542,  542,  542,  542,
          542,  542,  878,  649,  604,  625,  636,  667,  429,  659,
          635,  436,  659,  907,  892,  813,  599,  862,  905,  612,
          934,  605,   62,  451,  637,  601,  612,  863,  612,  740,
          612,  908,  603,  738,  659,  542,  936,  937,  938,  939,
          917,  944,  953,  954,  956,  567,  957,  668,  864,  894,
          175,  835,  606,  648,  619,  672,  744,  958,  612,  620,
          600,  612,  612,  673,  650,  867,  679,  959,  602,  895,
          612,  246,  960,  749,  489,  570,  767,  680,  896,  875,
          626,  922,  874,  750,  614,  770,  246,  493,  684,  872,
          890,  833,  685,  752,  475,  490,  760,  634,  629,  766,
          579,  686,  906,  768,  615,  652,  638,  632,  865,  690,
          621,  694,  900,  695,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,    0,    0,
            0,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
           -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,  128,
          128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
          128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
          128,  128,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  128,  -18,  -18,  -18,  -18,  128,  -18,
          -18,  -18,  -18,  -18,  -18,  128,  128,  128,  128,  128,
          128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
          128,  -18,  128,  128,  128,  -18,  975,  -18,  975,  975,
          975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
          975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
          975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
          975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
          128,    0,    0,  128,  -18,  128,  -18,  128,  -18,  128,
          128,  128,  128,  128,  128,  -18,  -18,  -18,  -18,  -18,
          -18,    0,  331,  331,  331,  331,  -18,  -18,  -18,  -18,
          156,  156,  156,  975,  975,  975,  975,  975,  975,  331,
          331,  398,  398,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  156,  156,  975,  975,  -55,  -55,  -55,
          -55,  -55,  -55,   44,   44,   44,  215,    0,    0,    0,
            0,    0,    0,  -55,  598,   44,  275,  275,  275,   44,
           44,   44,  215,    0,    0,    0,    0,  598,  275,    0,
            0,    0,  556,  817,    0,    0,    0,  275,  449,  449,
          449,  449,  246,  236,    0,  598,  598,  598,    0,  623,
            0,    0,    0,  556,    0,    0,    0,  556,    0,    0,
            0,    0,  542,   62,  862,  283,  271,    0,    0,    0,
            0,    0,    0,    0,  271,  271,  295,  295,    0,    0,
          567,  542,  542,  542,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,  283,    0,    0,
          246
    );

    protected $actionDefault = array(
            3,32767,32767,    1,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  116,  108,  122,  107,
          118,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  429,  429,32767,  386,32767,32767,32767,32767,
        32767,32767,32767,  193,  193,  193,32767,32767,32767,  418,
          418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
        32767,32767,32767,32767,32767,  275,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          280,  434,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  256,  257,  259,  260,  192,  419,  144,  281,  433,
          191,  146,  220,  390,32767,32767,32767,  222,   26,  155,
          100,  389,  131,  190,  274,  221,  197,  202,  203,  204,
          205,  206,  207,  208,  209,  210,  211,  212,  213,  196,
          344,  253,  252,  251,  346,32767,  345,  383,  383,  386,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  218,
          372,  371,  219,  342,  223,  343,  225,  347,  224,  241,
          242,  239,  240,  243,  349,  348,  365,  366,  363,  364,
          195,  244,  245,  246,  247,  367,  368,  369,  370,  177,
          177,  177,32767,32767,  428,  428,32767,32767,  232,  233,
          356,  357,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  178,32767,32767,32767,  135,  135,  135,  135,
          135,32767,32767,32767,32767,32767,  227,  228,  226,  351,
          352,  350,32767,32767,  318,32767,32767,32767,32767,32767,
          320,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  375,  391,  319,32767,32767,32767,32767,32767,32767,
        32767,32767,  404,  307,32767,32767,32767,32767,  300,  119,
          121,   64,  301,32767,32767,32767,  381,32767,32767,32767,
          409,  237,32767,32767,32767,32767,32767,32767,  441,32767,
          404,32767,32767,32767,32767,32767,32767,32767,32767,  250,
          229,  230,  231,32767,32767,32767,  408,  402,  359,  360,
          361,  362,  353,  354,  355,  358,32767,32767,32767,32767,
        32767,   68,  315,32767,32767,32767,  321,32767,32767,   68,
        32767,32767,32767,32767,   68,32767,  407,  406,   68,32767,
          385,   76,   68,   76,   76,32767,32767,   76,32767,  105,
          105,   76,32767,32767,   86,   84,  397,   76,32767,   76,
           68,   88,32767,32767,  289,   70,  385,   76,32767,  137,
          289,32767,  137,  137,   68,32767,   76,  137,32767,    4,
          325,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  302,32767,32767,32767,  271,
          272,  378,  393,32767,  394,32767,  300,32767,  235,  236,
          238,  215,32767,  217,  261,  262,  263,  264,  265,  266,
          267,  269,32767,32767,  305,  308,32767,32767,32767,    6,
           20,  154,  303,32767,  200,32767,32767,32767,32767,  436,
        32767,32767,  194,32767,   22,32767,  150,32767,   66,32767,
          426,32767,32767,  402,  304,  234,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,  403,32767,32767,32767,32767,
          126,32767,  338,32767,32767,32767,32767,32767,  198,32767,
        32767,  145,  435,32767,32767,32767,32767,32767,32767,32767,
           67,   87,32767,32767,32767,32767,  402,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,   89,32767,32767,32767,
        32767,  402,32767,32767,  130,  189,32767,32767,32767,32767,
        32767,32767,32767,32767,    4,32767,  171,32767,32767,32767,
        32767,32767,32767,32767,   28,   28,    3,   28,  113,   28,
            3,  105,  105,   61,  157,   28,  157,   28,  157,   28,
           28,   28,   28,   28,   28,  164,   28,   28,   28,   28,
           28
    );

    protected $goto = array(
          167,  167,  141,  141,  146,  141,  142,  143,  144,  149,
          151,  186,  169,  165,  165,  165,  165,  146,  146,  166,
          166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
          161,  162,  163,  164,  184,  140,  498,  499,  371,  500,
          504,  505,  506,  507,  508,  509,  510,  511,  852,  145,
          147,  148,  150,  172,  177,  185,  201,  249,  252,  254,
          256,  258,  259,  260,  261,  262,  263,  271,  272,  273,
          274,  288,  289,  316,  317,  318,  390,  391,  392,  545,
          187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
          197,  198,  199,  152,  153,  154,  168,  155,  170,  156,
          202,  157,  171,  158,  159,  203,  160,  138,  562,  705,
          562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
          562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
          562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
          562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
          562,  562,  502,  502,  502,  502,  502,  502, 1057, 1057,
          379,  794,  502,  502,  502,  502,  502,  502,  502,  502,
          502,  502,  606,  609,  513,  513,  280,  369,  281, 1073,
         1073, 1073,  659,  659,  659,  362,  362,  362,  362,  362,
          362, 1056,  574,  599,  524,  362,  362,  362,  362,  362,
          362,  362,  362,  362,  362, 1058, 1058,  952,  952,  449,
          449,  449,  449,  449,  449,  546,  547,  548,  549,  551,
          552,  553,  554,  556,  582,  615,  776,  776, 1078, 1078,
          660,  660,  660,  831,  410,  741,  741,  741,  741,  534,
          541,  736,  742,  608,  563, 1082,  563,  563,  563,  563,
          563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
          563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
          563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
          563,  563,  563,  563,  563,  563,  563,  563,  987,  372,
          987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
          987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
          987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
          987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
          987,  987,  963,  962,  348,  579,  588,  622,  330,  591,
          175, 1038,  314,  514,  514,  178,  179,  180,  398,  399,
          400,  401,  174,  200,  204,  206,  253,  255,  257,  264,
          265,  266,  267,  268,  269,  275,  276,  277,  278,  290,
          291,  319,  320,  321,  402,  403,  404,  405,  176,  181,
          250,  251,  182,  183,    5,  452,   16,  600,    6,    1,
          596,  351,  409,    2,    7, 1075,   17,  899,   18,    8,
           19,    9,   20,   10,  386,   11,   12,   13,   14,   15,
          397,  601,  540,  540,  568,  536,  658,  658,  658,  789,
          538,  538,  501,  503,  529,  543,  571,  572,  580,  586,
          780,  550,  519,  850,  669,  523,  762,  747,  745,  743,
          745,  628,  516,  771,  766,  519,  798,  973,  523,  523,
          416,  406,  539,  444,  515,  515,  445,  948,  949,  988,
          558,  968,  637,  519,  519,  519,  452,  945,  783,  909,
           26,   21,  363, 1088, 1088,  675,  461, 1049,  383,  384,
          373,  943, 1035,  946,  527,  618,  803,  557,  537, 1091,
         1088,    0,  947,  380,  380,  380,  750,  463,    0,    0,
          839,    0,   29, 1091, 1091,  380,  455,  597,    0,    0,
            0,    0,    0,    0,  396,    0,    0,    0,    0,    0,
          610,    0,    0,    0,  519,  349,  350,    0,    0,    0,
            0,    0,    0,    0,  522,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  544,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  528
    );

    protected $gotoCheck = array(
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   39,   32,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   96,   96,   96,   96,   96,   96,   98,   98,
            5,   65,   96,   96,   96,   96,   96,   96,   96,   96,
           96,   96,   44,   44,   96,   96,   48,   44,   48,   98,
           98,   98,    7,    7,    7,   39,   39,   39,   39,   39,
           39,   98,   22,   22,   81,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   97,   97,   39,   39,   39,
           39,   39,   39,   39,   39,   90,   90,   90,   90,   90,
           90,   90,   90,   90,   90,   39,   58,   58,   58,   58,
            8,    8,    8,   78,   78,   39,   39,   39,   39,    5,
           89,   39,   39,   39,   99,  120,   99,   99,   99,   99,
           99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
           99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
           99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
           99,   99,   99,   99,   99,   99,   99,   99,  106,   29,
          106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
          106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
          106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
          106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
          106,  106,  104,  104,   53,   43,   43,   43,  105,  108,
           13,  112,  105,   99,   99,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   14,   42,   14,   31,   14,    2,
           51,   51,   51,    2,   14,  118,   14,   82,   14,   14,
           14,   14,   14,   14,   30,   14,   14,   14,   14,   14,
           33,   33,   33,   33,   33,   33,    6,    6,    6,   62,
           33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           60,   26,    4,   81,   11,   26,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    4,   66,   63,   26,   26,
           42,   10,   42,   42,  102,  102,   42,   63,   63,  107,
           42,   16,   55,    4,    4,    4,   42,   63,   42,   16,
           16,   16,   16,  121,  121,   12,   42,   63,    9,    9,
           40,   94,  111,   63,   40,   42,   67,   16,   40,  121,
          121,   -1,   63,  103,  103,  103,   52,   88,   -1,   -1,
           80,   -1,   16,  121,  121,  103,   40,   16,   -1,   -1,
           -1,   -1,   -1,   -1,  103,   -1,   -1,   -1,   -1,   -1,
           40,   -1,   -1,   -1,    4,   53,   53,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,    4,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,    4,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   81
    );

    protected $gotoBase = array(
            0,    0, -237,    0,  109, -176,  415,  181,  229,  124,
           34,   78,   33,  135, -241,    0,   49,    0,    0,    0,
            0,    0,  148,    0,    0,  -30,  401,    0,    0,  243,
          111,  104,   84,  128,    0,    0,    0,    0,    0,  -97,
           56,    0,   19,   28, -290,    0,    0,    0, -460,    0,
            0,   57,   48, -106,    0,   95,    0,    0,  -56,    0,
          120,    0,  108,   31,    0,  130,   81,   43,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  -69,    0,
           35,  147,   92,    0,    0,    0,    0,    0,   37,  207,
          165,    0,    0,    0,   62,    0, -130,  -99, -146,   39,
            0,    0,  150,  168,    6,   14,   83,   91,  131,    0,
            0,   26,  132,    0,    0,    0,    0,    0,  110,    0,
          210,  160,    0
    );

    protected $gotoDefault = array(
        -32768,  468,    3,  653,  485,  520,  680,  681,  682,  375,
          374,  670,  676,  173,    4,  678,  900,  359,  685,  360,
          585,  687,  531,  689,  690,  139,  486,  376,  377,  532,
          385,  575,  704,  270,  382,  706,  361,  708,  713,  341,
          607,  590,  436,  559,  603,  487,  451,  583,  279,  566,
          393,  581,  749,  347,  757,  641,  765,  768,  488,  560,
          779,  450,  787, 1050,  394,  793,  799,  804,  807,  418,
          407,  594,  811,  812,  322,  816,  616,  617,  830,  302,
          838,  851,  431,  919,  921,  489,  490,  525,  459,  512,
          530,  491,  939,  408,  942,  492,  493,  426,  427,  960,
          957,  353, 1043,  352,  446,  313, 1028, 1027,  577,  992,
          456, 1081, 1039,  342,  494,  495,  370,  387, 1076,  430,
         1083, 1090,  567
    );

    protected $ruleToNonTerminal = array(
            0,    1,    2,    2,    4,    4,    5,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    9,    9,
           11,   11,   11,   11,   10,   10,   12,   14,   14,   15,
           15,   15,   15,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,   36,   36,   38,   37,   37,   30,   30,   40,   40,
           41,   41,    7,    8,    8,    8,   42,   42,   42,   50,
           50,   45,   45,   45,   46,   46,   49,   49,   47,   47,
           51,   51,   23,   23,   32,   32,   35,   35,   34,   34,
           52,   24,   24,   24,   24,   53,   53,   54,   54,   55,
           55,   21,   21,   17,   17,   56,   19,   19,   57,   18,
           18,   20,   20,   31,   31,   31,   43,   43,   59,   59,
           60,   60,   62,   62,   62,   61,   61,   44,   44,   63,
           63,   63,   64,   64,   65,   65,   65,   27,   27,   66,
           66,   66,   28,   28,   67,   67,   48,   48,   68,   68,
           68,   68,   73,   73,   74,   74,   75,   75,   75,   75,
           76,   77,   77,   72,   72,   69,   69,   71,   71,   79,
           79,   78,   78,   78,   78,   78,   78,   70,   70,   80,
           80,   29,   29,   22,   22,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   16,   16,
           26,   26,   85,   85,   86,   86,   86,   86,   81,   88,
           88,   93,   93,   94,   95,   95,   95,   95,   95,   95,
           99,   99,   39,   39,   39,   82,   82,  100,  100,   96,
           96,  101,  101,  101,  101,   83,   83,   83,   87,   87,
           87,   92,   92,  106,  106,  106,  106,  106,  106,  106,
          106,  106,  106,  106,  106,  106,   13,   13,   13,   13,
           13,   13,  109,  109,  109,  109,  109,  109,  109,  109,
          109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
          109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
          109,  109,  109,  109,  109,   91,   91,   84,   84,   84,
           84,  107,  107,  108,  108,  111,  111,  110,  110,  112,
          112,   33,   33,   33,   33,  114,  114,  113,  113,  113,
          113,  113,  115,  115,   98,   98,  102,  102,   97,   97,
          116,  116,  116,  116,  103,  103,  103,  103,   90,   90,
          104,  104,  104,   58,  117,  117,  118,  118,  118,   89,
           89,  119,  119,  120,  120,  120,  120,  105,  105,  105,
          105,  121,  121,  121,  121,  121,  121,  121,  122,  122,
          122
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    4,    4,    3,    3,    1,
            1,    3,    2,    4,    3,    1,    3,    2,    0,    1,
            1,    1,    1,    3,    5,    8,    3,    5,    9,    3,
            2,    3,    2,    3,    2,    3,    2,    3,    3,    3,
            1,    2,    5,    7,    9,    5,    1,    6,    3,    3,
            2,    0,    2,    8,    0,    4,    1,    3,    0,    1,
            0,    1,   11,    8,    7,    6,    0,    2,    3,    1,
            3,    1,    2,    2,    0,    2,    0,    2,    0,    2,
            1,    3,    1,    4,    1,    4,    1,    4,    1,    3,
            3,    3,    4,    4,    5,    0,    2,    4,    3,    1,
            1,    1,    4,    0,    2,    3,    0,    2,    4,    0,
            2,    0,    3,    1,    2,    1,    1,    0,    1,    3,
            4,    6,    2,    1,    1,    0,    1,    0,    2,    2,
            3,    3,    1,    3,    1,    2,    2,    3,    1,    1,
            2,    4,    3,    1,    1,    3,    2,    0,    3,    3,
           10,    3,    1,    3,    0,    2,    4,    5,    4,    4,
            3,    1,    1,    1,    3,    1,    1,    0,    1,    1,
            2,    1,    1,    1,    1,    1,    1,    1,    3,    1,
            3,    3,    1,    0,    1,    1,    3,    3,    4,    4,
            1,    2,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    2,    2,    2,    2,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
            3,    5,    4,    3,    4,    4,    2,    2,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
            1,    1,    1,    3,    2,    1,   10,   11,    3,    3,
            2,    4,    4,    3,    4,    4,    4,    4,    4,    0,
            4,    1,    3,    2,    3,    5,    7,    2,    2,    4,
            1,    1,    1,    2,    3,    1,    1,    1,    1,    1,
            1,    3,    3,    4,    4,    0,    2,    1,    0,    1,
            1,    0,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    3,    2,    1,    3,    1,    4,
            3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
            2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    5,    4,    4,    3,    1,    3,    1,    1,    3,
            3,    1,    1,    0,    2,    0,    1,    3,    1,    3,
            1,    1,    1,    1,    1,    6,    4,    3,    4,    2,
            4,    4,    1,    3,    1,    2,    1,    1,    4,    1,
            3,    6,    4,    4,    4,    4,    1,    4,    0,    1,
            1,    3,    1,    4,    3,    1,    1,    1,    0,    0,
            2,    3,    1,    3,    1,    4,    2,    2,    2,    1,
            2,    1,    4,    3,    3,    3,    6,    3,    1,    1,
            1
    );

    protected function reduceRule0() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule1($attributes) {
         $this->semValue = $this->handleNamespaces($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule2($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule3($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule4($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule5($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule6($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule7($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule8($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule9($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule10($attributes) {
         $this->semValue = new Node\Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $attributes); 
    }

    protected function reduceRule11($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $attributes); 
    }

    protected function reduceRule12($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule13($attributes) {
         $this->semValue = new Node\Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule14($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Node\Stmt\Use_::TYPE_NORMAL, $attributes); 
    }

    protected function reduceRule15($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_FUNCTION, $attributes); 
    }

    protected function reduceRule16($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_CONSTANT, $attributes); 
    }

    protected function reduceRule17($attributes) {
         $this->semValue = new Node\Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule18($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule19($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule20($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, $attributes); 
    }

    protected function reduceRule21($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule22($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule23($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule24($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule25($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule26($attributes) {
         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule27($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule28($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule29($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule30($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule31($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule32($attributes) {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope'); 
    }

    protected function reduceRule33($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule34($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(5-2)], array('stmts' => is_array($this->semStack[$this->stackPos-(5-3)]) ? $this->semStack[$this->stackPos-(5-3)] : array($this->semStack[$this->stackPos-(5-3)]), 'elseifs' => $this->semStack[$this->stackPos-(5-4)], 'else' => $this->semStack[$this->stackPos-(5-5)]), $attributes); 
    }

    protected function reduceRule35($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(8-2)], array('stmts' => $this->semStack[$this->stackPos-(8-4)], 'elseifs' => $this->semStack[$this->stackPos-(8-5)], 'else' => $this->semStack[$this->stackPos-(8-6)]), $attributes); 
    }

    protected function reduceRule36($attributes) {
         $this->semValue = new Node\Stmt\While_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule37($attributes) {
         $this->semValue = new Node\Stmt\Do_($this->semStack[$this->stackPos-(5-4)], is_array($this->semStack[$this->stackPos-(5-2)]) ? $this->semStack[$this->stackPos-(5-2)] : array($this->semStack[$this->stackPos-(5-2)]), $attributes); 
    }

    protected function reduceRule38($attributes) {
         $this->semValue = new Node\Stmt\For_(array('init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule39($attributes) {
         $this->semValue = new Node\Stmt\Switch_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule40($attributes) {
         $this->semValue = new Node\Stmt\Break_(null, $attributes); 
    }

    protected function reduceRule41($attributes) {
         $this->semValue = new Node\Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule42($attributes) {
         $this->semValue = new Node\Stmt\Continue_(null, $attributes); 
    }

    protected function reduceRule43($attributes) {
         $this->semValue = new Node\Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule44($attributes) {
         $this->semValue = new Node\Stmt\Return_(null, $attributes); 
    }

    protected function reduceRule45($attributes) {
         $this->semValue = new Node\Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule46($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule47($attributes) {
         $this->semValue = new Node\Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule48($attributes) {
         $this->semValue = new Node\Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule49($attributes) {
         $this->semValue = new Node\Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule50($attributes) {
         $this->semValue = new Node\Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule51($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule52($attributes) {
         $this->semValue = new Node\Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $attributes); 
    }

    protected function reduceRule53($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], array('keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]), $attributes); 
    }

    protected function reduceRule54($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], array('keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule55($attributes) {
         $this->semValue = new Node\Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule56($attributes) {
         $this->semValue = array(); /* means: no statement */ 
    }

    protected function reduceRule57($attributes) {
         $this->semValue = new Node\Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $attributes); 
    }

    protected function reduceRule58($attributes) {
         $this->semValue = new Node\Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule59($attributes) {
         $this->semValue = new Node\Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule60($attributes) {
         $this->semValue = new Node\Stmt\Label($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule61($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule62($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule63($attributes) {
         $this->semValue = new Node\Stmt\Catch_($this->semStack[$this->stackPos-(8-3)], substr($this->semStack[$this->stackPos-(8-4)], 1), $this->semStack[$this->stackPos-(8-7)], $attributes); 
    }

    protected function reduceRule64($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule65($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule66($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule67($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule68($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule69($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule70($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule71($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule72($attributes) {
         $this->semValue = new Node\Stmt\Function_($this->semStack[$this->stackPos-(11-3)], array('byRef' => $this->semStack[$this->stackPos-(11-2)], 'params' => $this->semStack[$this->stackPos-(11-6)], 'returnType' => $this->semStack[$this->stackPos-(11-8)], 'stmts' => $this->semStack[$this->stackPos-(11-10)]), array('generics' => $this->semStack[$this->stackPos-(11-4)]), $attributes); 
    }

    protected function reduceRule73($attributes) {
         $this->semValue = new Node\Stmt\Class_($this->semStack[$this->stackPos-(8-2)], array('type' => $this->semStack[$this->stackPos-(8-1)], 'extends' => $this->semStack[$this->stackPos-(8-4)], 'implements' => $this->semStack[$this->stackPos-(8-5)], 'stmts' => $this->semStack[$this->stackPos-(8-7)]), array('generics' => $this->semStack[$this->stackPos-(8-3)]), $attributes); 
    }

    protected function reduceRule74($attributes) {
         $this->semValue = new Node\Stmt\Interface_($this->semStack[$this->stackPos-(7-2)], array('extends' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]), array('generics' => $this->semStack[$this->stackPos-(7-3)]), $attributes); 
    }

    protected function reduceRule75($attributes) {
         $this->semValue = new Node\Stmt\Trait_($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], array('generics' => $this->semStack[$this->stackPos-(6-3)]), $attributes); 
    }

    protected function reduceRule76($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule77($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule78($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule79($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule80($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule81($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule82($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule83($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule84($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule85($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule86($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule87($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule88($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule89($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule90($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule91($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule92($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule93($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule94($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule95($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule96($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule97($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule98($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule99($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule100($attributes) {
         $this->semValue = new Node\Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule101($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule102($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule103($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule104($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(5-3)]; 
    }

    protected function reduceRule105($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule106($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule107($attributes) {
         $this->semValue = new Node\Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule108($attributes) {
         $this->semValue = new Node\Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule109() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule110() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule111($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule112($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule113($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule114($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule115($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(3-2)], is_array($this->semStack[$this->stackPos-(3-3)]) ? $this->semStack[$this->stackPos-(3-3)] : array($this->semStack[$this->stackPos-(3-3)]), $attributes); 
    }

    protected function reduceRule116($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule117($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule118($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule119($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule120($attributes) {
         $this->semValue = new Node\Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $attributes); 
    }

    protected function reduceRule121($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule122($attributes) {
         $this->semValue = new Node\Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule123($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule124($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true); 
    }

    protected function reduceRule125($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule126($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule127($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule128($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule129($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule130($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule131($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $attributes); 
    }

    protected function reduceRule132($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; $this->semStack[$this->stackPos-(2-1)]->setAttribute("generics", $this->semStack[$this->stackPos-(2-2)]); 
    }

    protected function reduceRule133($attributes) {
         $this->semValue = 'array'; 
    }

    protected function reduceRule134($attributes) {
         $this->semValue = 'callable'; 
    }

    protected function reduceRule135($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule136($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule137($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule138($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule139($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule140($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule141($attributes) {
         $this->semValue = array(new Node\Arg($this->semStack[$this->stackPos-(3-2)], false, false, $attributes)); 
    }

    protected function reduceRule142($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule143($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule144($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $attributes); 
    }

    protected function reduceRule145($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $attributes); 
    }

    protected function reduceRule146($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $attributes); 
    }

    protected function reduceRule147($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule148($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule149($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule150($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule151($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule152($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule153($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule154($attributes) {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function reduceRule155($attributes) {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule156($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule157($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule158($attributes) {
         $this->semValue = new Node\Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule159($attributes) {
         $this->semValue = new Node\Stmt\ClassConst($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule160($attributes) {
         $this->semValue = new Node\Stmt\ClassMethod($this->semStack[$this->stackPos-(10-4)], array('type' => $this->semStack[$this->stackPos-(10-1)], 'byRef' => $this->semStack[$this->stackPos-(10-3)], 'params' => $this->semStack[$this->stackPos-(10-7)], 'returnType' => $this->semStack[$this->stackPos-(10-9)], 'stmts' => $this->semStack[$this->stackPos-(10-10)]), array('generics' => $this->semStack[$this->stackPos-(10-5)]), $attributes); 
    }

    protected function reduceRule161($attributes) {
         $this->semValue = new Node\Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule162($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule163($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule164($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule165($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule166($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule167($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule168($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $attributes); 
    }

    protected function reduceRule169($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule170($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]); 
    }

    protected function reduceRule171($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule172($attributes) {
         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule173($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule174($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule175($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule176($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule177($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule178($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule179($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule180($attributes) {
         Node\Stmt\Class_::verifyModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule181($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule182($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PROTECTED; 
    }

    protected function reduceRule183($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PRIVATE; 
    }

    protected function reduceRule184($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_STATIC; 
    }

    protected function reduceRule185($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule186($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule187($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule188($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule189($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function reduceRule190($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule191($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule192($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule193($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule194($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule195($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule196($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule197($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule198($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule199($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule200($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule201($attributes) {
         $this->semValue = new Node\Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule202($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule203($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule204($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule205($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule206($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule207($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule208($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule209($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule210($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule211($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule212($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule213($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule214($attributes) {
         $this->semValue = new Node\Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule215($attributes) {
         $this->semValue = new Node\Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule216($attributes) {
         $this->semValue = new Node\Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule217($attributes) {
         $this->semValue = new Node\Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule218($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule219($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule220($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule221($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule222($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule223($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule224($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule225($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule226($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule227($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule228($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule229($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule230($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule231($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule232($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule233($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule234($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule235($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule236($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule237($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule238($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule239($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule240($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule241($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule242($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule243($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Spaceship($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule244($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule245($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule246($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule247($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule248($attributes) {
         $this->semValue = new Node\Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule249($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule250($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule251($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule252($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule253($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Coalesce($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule254($attributes) {
         $this->semValue = new Node\Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule255($attributes) {
         $this->semValue = new Node\Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule256($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE, $attributes); 
    }

    protected function reduceRule257($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE_ONCE, $attributes); 
    }

    protected function reduceRule258($attributes) {
         $this->semValue = new Node\Expr\Eval_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule259($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE, $attributes); 
    }

    protected function reduceRule260($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE_ONCE, $attributes); 
    }

    protected function reduceRule261($attributes) {
         $this->semValue = new Node\Expr\Cast\Int_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule262($attributes) {
         $this->semValue = new Node\Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule263($attributes) {
         $this->semValue = new Node\Expr\Cast\String_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule264($attributes) {
         $this->semValue = new Node\Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule265($attributes) {
         $this->semValue = new Node\Expr\Cast\Object_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule266($attributes) {
         $this->semValue = new Node\Expr\Cast\Bool_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule267($attributes) {
         $this->semValue = new Node\Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule268($attributes) {
         $this->semValue = new Node\Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule269($attributes) {
         $this->semValue = new Node\Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule270($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule271($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule272($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule273($attributes) {
         $this->semValue = new Node\Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule274($attributes) {
         $this->semValue = new Node\Expr\Print_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule275($attributes) {
         $this->semValue = new Node\Expr\Yield_(null, null, $attributes); 
    }

    protected function reduceRule276($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => false, 'byRef' => $this->semStack[$this->stackPos-(10-2)], 'params' => $this->semStack[$this->stackPos-(10-4)], 'uses' => $this->semStack[$this->stackPos-(10-6)], 'returnType' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $attributes); 
    }

    protected function reduceRule277($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => true, 'byRef' => $this->semStack[$this->stackPos-(11-3)], 'params' => $this->semStack[$this->stackPos-(11-5)], 'uses' => $this->semStack[$this->stackPos-(11-7)], 'returnType' => $this->semStack[$this->stackPos-(11-8)], 'stmts' => $this->semStack[$this->stackPos-(11-10)]), $attributes); 
    }

    protected function reduceRule278($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule279($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule280($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule281($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $attributes); 
    }

    protected function reduceRule282($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule283($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule284($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule285($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Scalar\String_(Node\Scalar\String_::parse($this->semStack[$this->stackPos-(4-1)]), $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule286($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule287($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule288($attributes) {
         $this->semValue = new Node\Expr\New_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], array('generics' => $this->semStack[$this->stackPos-(4-3)]), $attributes); 
    }

    protected function reduceRule289($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule290($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule291($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule292($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule293($attributes) {
         $this->semValue = new Node\Expr\ClosureUse(substr($this->semStack[$this->stackPos-(2-2)], 1), $this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule294($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], array('generics' => $this->semStack[$this->stackPos-(3-2)]), $attributes); 
    }

    protected function reduceRule295($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], array('generics' => $this->semStack[$this->stackPos-(5-4)]), $attributes); 
    }

    protected function reduceRule296($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(7-1)], $this->semStack[$this->stackPos-(7-4)], $this->semStack[$this->stackPos-(7-7)], array('generics' => $this->semStack[$this->stackPos-(7-6)]), $attributes); 
    }

    protected function reduceRule297($attributes) {
        
            if ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
                $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(2-1)]->class, new Node\Expr\Variable($this->semStack[$this->stackPos-(2-1)]->name, $attributes), $this->semStack[$this->stackPos-(2-2)], $attributes);
            } elseif ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
                $tmp = $this->semStack[$this->stackPos-(2-1)];
                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->semValue = new Node\Expr\StaticCall($tmp->var->class, $this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes);
                $tmp->var = new Node\Expr\Variable($tmp->var->name, $attributes);
            } else {
                throw new \Exception;
            }
          
    }

    protected function reduceRule298($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule299($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule300($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule301($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule302($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule303($attributes) {
         $this->semValue = new Node\Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule304($attributes) {
         $this->semValue = new Node\Name\Relative($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule305($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule306($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule307($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule308($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule309($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule310($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule311($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule312($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule313($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule314($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule315($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule316($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule317($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule318($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule319($attributes) {
         $this->semValue = array(Node\Scalar\String_::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`')); 
    }

    protected function reduceRule320($attributes) {
         foreach ($this->semStack[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '`'); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule321($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule322($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule323($attributes) {
         $this->semValue = new Node\Scalar\LNumber(Node\Scalar\LNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule324($attributes) {
         $this->semValue = new Node\Scalar\DNumber(Node\Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule325($attributes) {
         $this->semValue = new Node\Scalar\String_(Node\Scalar\String_::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule326($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Line($attributes); 
    }

    protected function reduceRule327($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\File($attributes); 
    }

    protected function reduceRule328($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Dir($attributes); 
    }

    protected function reduceRule329($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Class_($attributes); 
    }

    protected function reduceRule330($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Trait_($attributes); 
    }

    protected function reduceRule331($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Method($attributes); 
    }

    protected function reduceRule332($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Function_($attributes); 
    }

    protected function reduceRule333($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Namespace_($attributes); 
    }

    protected function reduceRule334($attributes) {
         $this->semValue = new Node\Scalar\String_(Node\Scalar\String_::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)]), $attributes); 
    }

    protected function reduceRule335($attributes) {
         $this->semValue = new Node\Scalar\String_('', $attributes); 
    }

    protected function reduceRule336($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule337($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule338($attributes) {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule339($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule340($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule341($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule342($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule343($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule344($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule345($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule346($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule347($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule348($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule349($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule350($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule351($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule352($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule353($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule354($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule355($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule356($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule357($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule358($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule359($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule360($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule361($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule362($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule363($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule364($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule365($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule366($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule367($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule368($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule369($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule370($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule371($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule372($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule373($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule374($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule375($attributes) {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule376($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule377($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule378($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule379($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, '"'); } }; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule380($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String_::parseEscapeSequences($s, null); } } $s = preg_replace('~(\r\n|\n|\r)$~', '', $s); if ('' === $s) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule381($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule382($attributes) {
         $this->semValue = 'class'; 
    }

    protected function reduceRule383($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule384($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule385() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule386() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule387($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule388($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule389($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule390($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule391($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule392($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule393($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule394($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule395($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule396($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule397($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule398($attributes) {
         $this->semValue = new Node\Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule399($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule400($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule401($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule402($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule403($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule404($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule405($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule406($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule407($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule408($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule409($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule410($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], substr($this->semStack[$this->stackPos-(3-3)], 1), $attributes); 
    }

    protected function reduceRule411($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule412($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule413($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule414($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule415($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule416($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule417($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule418($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule419($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule420($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule421($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule422($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule423($attributes) {
         $this->semValue = new Node\Expr\List_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule424($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule425($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule426($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule427($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule428($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule429($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule430($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule431($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule432($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule433($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule434($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule435($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $attributes); 
    }

    protected function reduceRule436($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $attributes); 
    }

    protected function reduceRule437($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule438($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule439($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule440($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); 
    }

    protected function reduceRule441($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule442($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(4-1)], 1), $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule443($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(3-1)], 1), $attributes), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule444($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule445($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule446($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable($this->semStack[$this->stackPos-(6-2)], $attributes), $this->semStack[$this->stackPos-(6-4)], $attributes); 
    }

    protected function reduceRule447($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule448($attributes) {
         $this->semValue = new Node\Scalar\String_($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule449($attributes) {
         $this->semValue = new Node\Scalar\String_($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule450($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }
}
